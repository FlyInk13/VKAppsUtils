{"version":3,"sources":["../src/PanelHeader.js"],"names":["PanelHeaderFull","props","fullScreenEnabled","document","fullscreenElement","setState","state","self","openFullscreen","documentElement","closeFullscreen","onFullScreenUpdate","window","addEventListener","removeEventListener","isWeb","newProps","theme","right","fullScreenToggle","elem","body","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","React","Component"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAGMA,e;;;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,yFAAMA,KAAN;;AADiB,yEAQE,YAAM;AACzB,UAAMC,iBAAiB,GAAG,CAAC,CAACC,QAAQ,CAACC,iBAArC;;AACA,YAAKC,QAAL,CAAc;AAAEH,QAAAA,iBAAiB,EAAjBA;AAAF,OAAd;AACD,KAXkB;;AAGjB,UAAKI,KAAL,GAAa;AACXJ,MAAAA,iBAAiB,EAAE;AADR,KAAb;AAHiB;AAMlB;;;;uCAOkB;AACjB,UAAMK,IAAI,GAAGP,eAAb;;AACA,UAAI,CAACG,QAAQ,CAACC,iBAAd,EAAiC;AAC/BG,QAAAA,IAAI,CAACC,cAAL,CAAoBL,QAAQ,CAACM,eAA7B;AACD,OAFD,MAEO;AACLF,QAAAA,IAAI,CAACG,eAAL;AACD;;AACD,WAAKC,kBAAL;AACD;;;wCA2BmB;AAClBC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA4C,KAAKF,kBAAjD;AACD;;;2CAEsB;AACrBC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,kBAA3B,EAA+C,KAAKH,kBAApD;AACD;;;6BAEQ;AAAA;;AACP,UAAMV,KAAK,GAAG,KAAKA,KAAnB;;AAEA,UAAI,CAACA,KAAK,CAACc,KAAX,EAAkB;AAChB,eACE,gCAAC,uBAAD,EAAiBd,KAAjB,CADF;AAGD;;AAED,UAAMe,QAAQ,GAAG,EAAjB;AACAA,MAAAA,QAAQ,CAACC,KAAT,GAAiB,WAAjB;AACAD,MAAAA,QAAQ,CAACE,KAAT,GACE,gCAAC,wBAAD;AAAc,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACC,gBAAL,EAAN;AAAA;AAAvB,SACA,KAAKb,KAAL,CAAWJ,iBAAX,GACA,gCAAC,2BAAD,OADA,GAGF,gCAAC,sBAAD,OAJE,CADF;AAUA,aACE,gCAAC,+BAAD,eAAyBD,KAAzB,EAAoCe,QAApC,EADF;AAGD;;;qCAzDuB;AACtB,UAAII,IAAI,GAAGjB,QAAQ,CAACkB,IAApB;;AACA,UAAID,IAAI,CAACE,iBAAT,EAA4B;AAC1BF,QAAAA,IAAI,CAACE,iBAAL;AACD,OAFD,MAEO,IAAIF,IAAI,CAACG,oBAAT,EAA+B;AAAE;AACtCH,QAAAA,IAAI,CAACG,oBAAL;AACD,OAFM,MAEA,IAAIH,IAAI,CAACI,uBAAT,EAAkC;AAAE;AACzCJ,QAAAA,IAAI,CAACI,uBAAL;AACD,OAFM,MAEA,IAAIJ,IAAI,CAACK,mBAAT,EAA8B;AAAE;AACrCL,QAAAA,IAAI,CAACK,mBAAL;AACD;AACF;;;sCAEwB;AACvB,UAAItB,QAAQ,CAACuB,cAAb,EAA6B;AAC3BvB,QAAAA,QAAQ,CAACuB,cAAT;AACD,OAFD,MAEO,IAAIvB,QAAQ,CAACwB,mBAAb,EAAkC;AAAE;AACzCxB,QAAAA,QAAQ,CAACwB,mBAAT;AACD,OAFM,MAEA,IAAIxB,QAAQ,CAACyB,oBAAb,EAAmC;AAAE;AAC1CzB,QAAAA,QAAQ,CAACyB,oBAAT;AACD,OAFM,MAEA,IAAIzB,QAAQ,CAAC0B,gBAAb,EAA+B;AAAE;AACtC1B,QAAAA,QAAQ,CAAC0B,gBAAT;AACD;AACF;;;;EA/C2BC,kBAAMC,S;;eAoFrB/B,e","sourcesContent":["import React from 'react';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\n\nimport Icon24Fullscreen from '@vkontakte/icons/dist/24/fullscreen';\nimport Icon24FullscreenExit from '@vkontakte/icons/dist/24/fullscreen_exit';\nimport PanelHeaderInternal from \"./PanelHeaderInternal\";\n\n\nclass PanelHeaderFull extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fullScreenEnabled: false\n    };\n  }\n\n  onFullScreenUpdate = () => {\n    const fullScreenEnabled = !!document.fullscreenElement;\n    this.setState({ fullScreenEnabled });\n  };\n\n  fullScreenToggle() {\n    const self = PanelHeaderFull;\n    if (!document.fullscreenElement) {\n      self.openFullscreen(document.documentElement);\n    } else {\n      self.closeFullscreen();\n    }\n    this.onFullScreenUpdate();\n  }\n\n  static openFullscreen() {\n    var elem = document.body;\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.mozRequestFullScreen) { /* Firefox */\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n      elem.webkitRequestFullscreen();\n    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n      elem.msRequestFullscreen();\n    }\n  }\n\n  static closeFullscreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) { /* Firefox */\n      document.mozCancelFullScreen();\n    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) { /* IE/Edge */\n      document.msExitFullscreen();\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('fullscreenchange', this.onFullScreenUpdate);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('fullscreenchange', this.onFullScreenUpdate);\n  }\n\n  render() {\n    const props = this.props;\n\n    if (!props.isWeb) {\n      return (\n        <PanelHeader {...props}/>\n    );\n    }\n\n    const newProps = {};\n    newProps.theme = 'alternate';\n    newProps.right = (\n      <HeaderButton onClick={() => this.fullScreenToggle()}>\n    { this.state.fullScreenEnabled ? (\n      <Icon24FullscreenExit/>\n    ) : (\n    <Icon24Fullscreen/>\n    )}\n  </HeaderButton>\n  );\n\n    return (\n      <PanelHeaderInternal {...props} {...newProps}/>\n  )\n  }\n}\n\nexport default PanelHeaderFull;\n"],"file":"PanelHeader.js"}