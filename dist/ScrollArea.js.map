{"version":3,"sources":["../src/ScrollArea.js"],"names":["ScrollArea","props","event","el","currentTarget","posOld","pos","posNew","x","touches","clientX","y","clientY","type","offsetX","offsetY","scrollLeft","scrollTop","scrollArea","React","createRef","current","querySelectorAll","selector","getElements","forEach","addEventListener","onTouch","removeEventListener","Component"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;;AADiB,8DAKT,UAACC,KAAD,EAAW;AACnB,UAAMC,EAAE,GAAGD,KAAK,CAACE,aAAjB;AACA,UAAMC,MAAM,GAAGF,EAAE,CAACG,GAAlB;AACA,UAAMC,MAAM,GAAG;AACbC,QAAAA,CAAC,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd,EAAiBC,OADP;AAEbC,QAAAA,CAAC,EAAET,KAAK,CAACO,OAAN,CAAc,CAAd,EAAiBG;AAFP,OAAf;;AAKA,UAAIV,KAAK,CAACW,IAAN,KAAe,YAAnB,EAAiC;AAC/B,YAAMC,OAAO,GAAGT,MAAM,CAACG,CAAP,GAAWD,MAAM,CAACC,CAAlC;AACA,YAAMO,OAAO,GAAGV,MAAM,CAACM,CAAP,GAAWJ,MAAM,CAACI,CAAlC;AAEAR,QAAAA,EAAE,CAACa,UAAH,IAAiBF,OAAjB;AACAX,QAAAA,EAAE,CAACc,SAAH,IAAgBF,OAAhB;AACD;;AAEDZ,MAAAA,EAAE,CAACG,GAAH,GAASC,MAAT;AACD,KAtBkB;;AAEjB,UAAKW,UAAL,GAAkBC,kBAAMC,SAAN,EAAlB;AAFiB;AAGlB;;;;kCAqBa;AACZ,aAAO,KAAKF,UAAL,CAAgBG,OAAhB,CAAwBC,gBAAxB,CAAyC,KAAKrB,KAAL,CAAWsB,QAApD,CAAP;AACD;;;wCAEmB;AAAA;;AAClB,WAAKC,WAAL,GAAmBC,OAAnB,CAA2B,UAACtB,EAAD,EAAQ;AACjCA,QAAAA,EAAE,CAACuB,gBAAH,CAAoB,YAApB,EAAkC,MAAI,CAACC,OAAvC,EAAgD,KAAhD;AACAxB,QAAAA,EAAE,CAACuB,gBAAH,CAAoB,WAApB,EAAiC,MAAI,CAACC,OAAtC,EAA+C,KAA/C;AACD,OAHD;AAID;;;2CAEsB;AAAA;;AACrB,WAAKH,WAAL,GAAmBC,OAAnB,CAA2B,UAACtB,EAAD,EAAQ;AACjCA,QAAAA,EAAE,CAACyB,mBAAH,CAAuB,YAAvB,EAAqC,MAAI,CAACD,OAA1C;AACAxB,QAAAA,EAAE,CAACyB,mBAAH,CAAuB,WAAvB,EAAoC,MAAI,CAACD,OAAzC;AACD,OAHD;AAID;;;6BAEQ;AACP,aAAO;AAAK,QAAA,GAAG,EAAE,KAAKT,UAAf;AAA2B,QAAA,SAAS,EAAC;AAArC,SAAsD,KAAKjB,KAA3D,EAAP;AACD;;;;EA7CsBkB,kBAAMU,S;;eAgDhB7B,U","sourcesContent":["import React from 'react';\nimport { PanelHeader, HeaderButton, Alert, Input } from '@vkontakte/vkui';\n\nclass ScrollArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.scrollArea = React.createRef();\n  }\n\n  onTouch = (event) => {\n    const el = event.currentTarget;\n    const posOld = el.pos;\n    const posNew = {\n      x: event.touches[0].clientX,\n      y: event.touches[0].clientY,\n    };\n\n    if (event.type !== 'touchstart') {\n      const offsetX = posOld.x - posNew.x;\n      const offsetY = posOld.y - posNew.y;\n\n      el.scrollLeft += offsetX;\n      el.scrollTop += offsetY;\n    }\n\n    el.pos = posNew;\n  };\n\n  getElements() {\n    return this.scrollArea.current.querySelectorAll(this.props.selector);\n  }\n\n  componentDidMount() {\n    this.getElements().forEach((el) => {\n      el.addEventListener('touchstart', this.onTouch, false);\n      el.addEventListener('touchmove', this.onTouch, false);\n    });\n  }\n\n  componentWillUnmount() {\n    this.getElements().forEach((el) => {\n      el.removeEventListener('touchstart', this.onTouch);\n      el.removeEventListener('touchmove', this.onTouch);\n    });\n  }\n\n  render() {\n    return <div ref={this.scrollArea} className='scrollArea' {...this.props} />;\n  }\n}\n\nexport default ScrollArea;\n"],"file":"ScrollArea.js"}